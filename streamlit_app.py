import streamlit as st
import random
import base64
import os
import re
import unicodedata
import difflib
from tempfile import NamedTemporaryFile
from gtts import gTTS
import speech_recognition as sr
from audio_recorder_streamlit import audio_recorder

# ----------------------------
# Banco de frases por n√≠vel
# ----------------------------
nivel_facil = [
    ("Hi, how are you?", "I'm fine, thanks.", "Oi, como voc√™ est√°?", "Estou bem, obrigado."),
    ("What‚Äôs your name?", "My name is John.", "Qual √© o seu nome?", "Meu nome √© John."),
    ("Do you like coffee?", "Yes, I like coffee.", "Voc√™ gosta de caf√©?", "Sim, eu gosto de caf√©."),
    ("Good morning!", "Good morning!", "Bom dia!", "Bom dia!"),
    ("Thank you!", "You're welcome.", "Obrigado!", "De nada."),
    ("See you later!", "See you!", "At√© mais!", "At√© logo."),
    ("Excuse me", "Yes?", "Com licen√ßa", "Sim?"),
    ("I need help", "I can help you.", "Preciso de ajuda", "Eu posso ajudar."),
    ("Where is the restroom?", "It is over there.", "Onde fica o banheiro?", "Fica ali."),
    ("I am ready", "Great! Let's start.", "Estou pronto", "√ìtimo! Vamos come√ßar."),
]

nivel_medio = [
    ("Where is the box?", "The box is on the table.", "Onde est√° a caixa?", "A caixa est√° na mesa."),
    ("Can you help me?", "Yes, I can help you.", "Voc√™ pode me ajudar?", "Sim, eu posso te ajudar."),
    ("Do you work here?", "Yes, I do.", "Voc√™ trabalha aqui?", "Sim, eu trabalho aqui."),
    ("I need this item", "I will get it for you.", "Preciso deste item", "Vou pegar para voc√™."),
    ("Check the inventory", "I will check it now.", "Verifique o invent√°rio", "Vou verificar agora."),
    ("When will it arrive?", "Tomorrow morning.", "Quando vai chegar?", "Amanh√£ de manh√£."),
    ("Where can I find the supplies?", "They are in aisle 3.", "Onde posso encontrar os suprimentos?", "No corredor 3."),
    ("Please sign here", "Okay, I will sign.", "Por favor, assine aqui", "Ok, vou assinar."),
    ("The truck is here", "I will unload it.", "O caminh√£o chegou", "Vou descarregar."),
    ("We need more boxes", "I will order them.", "Precisamos de mais caixas", "Vou pedir."),
]

nivel_dificil = [
    ("Do we have this item in stock?", "Yes, we have it.", "Temos este item em estoque?", "Sim, temos."),
    ("Please, sign the paper.", "Okay, I will sign.", "Por favor, assine o papel", "Ok, eu vou assinar."),
    ("The truck just arrived.", "I will check it.", "O caminh√£o acabou de chegar", "Eu vou verificar."),
    ("Where can I find the new supplies?", "They are in aisle 3.", "Onde posso encontrar os novos suprimentos?", "Est√£o no corredor 3."),
    ("Check the inventory for today.", "I will check it now.", "Verifique o invent√°rio de hoje", "Vou verificar agora."),
    ("Can you organize the shelf?", "Yes, I will organize it.", "Pode organizar a prateleira", "Sim, vou organizar."),
    ("We need to prepare the order", "I will prepare it.", "Precisamos preparar o pedido", "Vou preparar."),
    ("Is this item damaged?", "No, it is fine.", "Este item est√° danificado?", "N√£o, est√° ok."),
    ("Confirm the delivery", "I will confirm it.", "Confirme a entrega", "Vou confirmar."),
    ("Update the stock list", "I will update it.", "Atualize a lista de estoque", "Vou atualizar."),
]

# ----------------------------
# Utilidades
# ----------------------------
def gerar_audio(texto, lang="en"):
    tts = gTTS(text=texto, lang=lang)
    filename = "voz.mp3"
    tts.save(filename)
    with open(filename, "rb") as f:
        b64 = base64.b64encode(f.read()).decode()
    try:
        os.remove(filename)
    except Exception:
        pass
    return f'<audio autoplay controls src="data:audio/mp3;base64,{b64}"></audio>'

def normalizar(txt: str) -> str:
    txt = txt.strip().lower()
    txt = "".join(c for c in unicodedata.normalize("NFKD", txt) if not unicodedata.combining(c))
    txt = re.sub(r"[^a-z0-9']+", " ", txt)
    return " ".join(txt.split())

def similaridade(a: str, b: str) -> float:
    return difflib.SequenceMatcher(None, normalizar(a), normalizar(b)).ratio()

def verificar_texto(resposta_usuario: str, resposta_correta: str):
    if not resposta_usuario.strip():
        return ("warn", "Digite sua resposta ou use o microfone.", 0)

    if normalizar(resposta_usuario) == normalizar(resposta_correta):
        return ("success", "‚úÖ Correto!", 1)

    sim = similaridade(resposta_usuario, resposta_correta)

    if sim >= 0.9:
        return ("info", f"Quase perfeito! (similaridade {sim*100:.0f}%).", 0)
    elif sim >= 0.75:
        return ("error", f"Pequenos erros detectados (similaridade {sim*100:.0f}%).", 0)
    else:
        return ("error", f"‚ùå Errado (similaridade {sim*100:.0f}%).", 0)

def transcrever_wav_bytes(wav_bytes: bytes, language="en-US") -> str | None:
    r = sr.Recognizer()
    with NamedTemporaryFile(delete=False, suffix=".wav") as tmp:
        tmp.write(wav_bytes)
        tmp_path = tmp.name
    try:
        with sr.AudioFile(tmp_path) as source:
            audio = r.record(source)
        return r.recognize_google(audio, language=language)
    except sr.UnknownValueError:
        return None
    finally:
        try:
            os.remove(tmp_path)
        except Exception:
            pass

# ----------------------------
# App Streamlit
# ----------------------------
st.set_page_config(page_title="Treino de Ingl√™s - Almoxarifado", page_icon="üì¶")
st.title("üì¶ English Dialogue Trainer - Almoxarifado")

nivel = st.selectbox("Selecione o n√≠vel:", ["F√°cil", "M√©dio", "Dif√≠cil"])
banco = nivel_facil if nivel == "F√°cil" else nivel_medio if nivel == "M√©dio" else nivel_dificil

# Inicializar session_state
if "frase_atual" not in st.session_state:
    st.session_state.frase_atual = random.choice(banco)
    st.session_state.score = 0
    st.session_state.total = 0
    st.session_state.streak = 0
    st.session_state.historico = []

if "nivel_sel" not in st.session_state:
    st.session_state.nivel_sel = nivel
elif st.session_state.nivel_sel != nivel:
    st.session_state.nivel_sel = nivel
    st.session_state.frase_atual = random.choice(banco)
    st.session_state.streak = 0
    st.rerun()

pergunta_en, resposta_en, pergunta_pt, resposta_pt = st.session_state.frase_atual

# --- Exibi√ß√£o ---
st.subheader("Frase para treinar:")
st.markdown(f"**{pergunta_en}**")
if nivel == "F√°cil":
    st.markdown(f"*({pergunta_pt})*")
else:
    if st.checkbox("Mostrar tradu√ß√£o", False):
        st.markdown(f"*({pergunta_pt})*")

st.subheader("Resposta sugerida:")
st.markdown(f"**{resposta_en}**")
if nivel == "F√°cil":
    st.markdown(f"*({resposta_pt})*")
else:
    if st.checkbox("Mostrar tradu√ß√£o da resposta", False):
        st.markdown(f"*({resposta_pt})*")

# --- Ouvir ---
col1, col2 = st.columns(2)
with col1:
    if st.button("üîä Ouvir frase em ingl√™s"):
        st.markdown(gerar_audio(pergunta_en, "en"), unsafe_allow_html=True)
with col2:
    if st.button("üîä Ouvir resposta correta"):
        st.markdown(gerar_audio(resposta_en, "en"), unsafe_allow_html=True)

st.divider()

# --- Resposta por TEXTO ---
st.markdown("**Responder digitando:**")
resposta_usuario = st.text_input("Digite sua resposta em ingl√™s:")

if st.button("‚úÖ Verificar resposta (texto)"):
    st.session_state.total += 1
    status, msg, inc = verificar_texto(resposta_usuario, resposta_en)
    st.session_state.score += inc
    st.session_state.streak = st.session_state.streak + 1 if inc == 1 else 0

    st.session_state.historico.append(
        {"modo": "Texto", "resposta": resposta_usuario, "esperado": resposta_en, "resultado": msg}
    )

    if status == "success":
        st.success(msg + f" üî• Streak: {st.session_state.streak}")
        st.markdown(gerar_audio("Correct! Well done!", "en"), unsafe_allow_html=True)
    elif status == "info":
        st.info(msg)
    elif status == "warn":
        st.warning(msg)
    else:
        st.error(msg)
        st.session_state.streak = 0

# --- Resposta por √ÅUDIO ---
st.divider()
st.markdown("**Responder falando (microfone):**")
st.caption("Clique em gravar, depois em transcrever e verificar.")

audio_bytes = audio_recorder(sample_rate=44100, pause_threshold=2.0, text="üéôÔ∏è Gravar / Parar")

if audio_bytes:
    st.audio(audio_bytes, format="audio/wav")

    if st.button("üó£Ô∏è Transcrever e verificar (√°udio)"):
        transcrito = transcrever_wav_bytes(audio_bytes, language="en-US")
        if not transcrito:
            st.warning("N√£o consegui entender o √°udio.")
        else:
            st.write(f"**Voc√™ disse:** _{transcrito}_")
            st.session_state.total += 1
            status, msg, inc = verificar_texto(transcrito, resposta_en)
            st.session_state.score += inc
            st.session_state.streak = st.session_state.streak + 1 if inc == 1 else 0

            st.session_state.historico.append(
                {"modo": "√Åudio", "resposta": transcrito, "esperado": resposta_en, "resultado": msg}
            )

            if status == "success":
                st.success(msg + f" üî• Streak: {st.session_state.streak}")
                st.markdown(gerar_audio("Great pronunciation!", "en"), unsafe_allow_html=True)
            elif status == "info":
                st.info(msg)
            else:
                st.error(msg)
                st.session_state.streak = 0

st.divider()

if st.button("‚û° Pr√≥xima frase"):
    st.session_state.frase_atual = random.choice(banco)
    st.rerun()

st.success(f"Pontua√ß√£o: {st.session_state.score}/{st.session_state.total} | üî• Streak atual: {st.session_state.streak}")

# Hist√≥rico de respostas
if st.session_state.historico:
    st.subheader("üìú Hist√≥rico de respostas")
    for h in st.session_state.historico[-10:][::-1]:
        st.markdown(f"- **{h['modo']}** ‚Üí Voc√™ disse: _{h['resposta']}_ | Correto: **{h['esperado']}** ‚Üí {h['resultado']}")
